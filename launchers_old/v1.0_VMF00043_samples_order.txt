# Steps that only need doing once (not per sample set):

# 1. Calculate mean accessibility across the genome. The following command was run from inside my folder ~/personal/funestus_data. The "vo_afun_release" folder contains the zarrs for the site_filters and for the snp_genotypes/all/sites

python ~/scripts/CNV_funestus/scripts/calculate_windowed_mean_accessibility.py vo_afun_release/v1.0/site_filters/dt_20200416/funestus vo_afun_release/v1.0/snp_genotypes/all/sites mean_accessibility.csv 300

# 2. Calculate mean GC content across the genome. Again, the following command was run from inside my folder ~/personal/funestus_data. 

python ~/scripts/CNV_funestus/scripts/getGC_v4.py vo_afun_release/reference/genome/idAnoFuneDA-416_04/idAnoFuneDA-416_04_1.curated_primary.fa 300 300 Afun_genome_GC_content.csv

# 3. Get the positions of all the genes in the genome. The output of this is the file ~/personal/funestus_data/gene_regions.csv, which is just a simplified version of the gff3 file. In hindsight, I would probably have been better off just using the gff3 file directly, but rather than recode the scripts that need to know where the genes are, I just stuck to how I did it for gambiae. I have left the script that I wrote to do that in ~/personal/funestus_data/create_gene_regions_table.py. The script doesn't take any arguments, they are all built into the script. 

# Now here is the order of launchers that were run to call CNVs in release v1.0

~/scripts/CNV_funestus/scripts/setup_folder_gsutil_nobams_wrapper.sh v1.0 1231-VO-MULTI-WONDJI-VMF00043

~/scripts/CNV_funestus/launchers/run_coverage_and_diagnostic_reads_vobs.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/bampaths.csv 30 v1.0_1231-VO-MULTI-WONDJI-VMF00043

# That runs a job array with one job per sample. Some of these jobs fail arbitrarily, either because the bam files fail to download, or because the node arbitrarily maxes out on memory (even though it gets allocated more than 10 times more memory than it needs). So after each run, we need to check how many samples failed, and then run the above command again for the failing samples. We use the following lines to do this. The first line returns a file containing the bampaths for just the failing samples, and then the second line just reruns the above command with the new bampaths file. Just replace {x} with the iteration of this check (so the first time you run this, set {x} to 1. Then when after you have rerun the failed samples, check again for failed samples, setting {x} to 2, etc...

R --slave -f ~/scripts/CNV_funestus/scripts/find_failed_samples.r --args v1.0_1231-VO-MULTI-WONDJI-VMF00043 /personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/bampaths.csv 5 10 ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/bampaths_failed_samples_{x}.csv > ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/find_failed_samples_{x}.log 2>&1 &

~/scripts/CNV_funestus/launchers/run_coverage_and_diagnostic_reads_vobs.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/bampaths_failed_samples_{x}.csv 30 v1.0_1231-VO-MULTI-WONDJI-VMF00043

# Once no samples have failed, you can move on

# Now for gambiae, I ran the following script at this stage when I did the whole of phase 3 together, but then for further sample sets I didn't run it again, I just used the output of this script from phase 3. This is because the output of this script affects which genomic windows get filtered out in the analysis, and I didn't want different genomic windows filtered out from each sample set (so that the CNVs found in different sample sets could be compared). The script needs to be run separately on each chromosome. Here is how I ran them for funestus: 

cd ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/coverage/2RL
python ~/scripts/CNV_funestus/scripts/get_prop_mapq0.py ../../data/fake_manifest.csv mapq_proportions_2RL.csv
cd ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/coverage/3RL
python ~/scripts/CNV_funestus/scripts/get_prop_mapq0.py ../../data/fake_manifest.csv mapq_proportions_3RL.csv
cd ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/coverage/X
python ~/scripts/CNV_funestus/scripts/get_prop_mapq0.py ../../data/fake_manifest.csv mapq_proportions_X.csv
# Then the three outputs needed to be concatenated like this
cd ~/personal/funestus_data
cat ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/coverage/*/mapq_proportions*.csv > mapq_proportions_allchrom.csv

# Now we can move on with the rest of the pipeline

~/scripts/CNV_funestus/launchers/run_coverage_stats_by_species_vobs.sh v1.0_1231-VO-MULTI-WONDJI-VMF00043 

~/scripts/CNV_funestus/launchers/run_HMM_vobs.sh v1.0_1231-VO-MULTI-WONDJI-VMF00043

# Here you may find a line in the Ag1000G pipeline that runs the script join_species_coverage_variance_files_vobs.sh. It is not needed for funestus since there is only one species. 

~/scripts/CNV_funestus/launchers/run_coverage_CNVs_vobs.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/sample_metadata_tabs.tsv v1.0_1231-VO-MULTI-WONDJI-VMF00043 

~/scripts/CNV_funestus/launchers/run_modal_CNVs_vobs.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/sample_metadata_tabs.tsv v1.0_1231-VO-MULTI-WONDJI-VMF00043 

~/scripts/CNV_funestus/launchers/run_target_regions.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/fake_manifest.txt ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/sample_metadata_tabs.tsv v1.0_1231-VO-MULTI-WONDJI-VMF00043 

# The following script can't be run until you have established some diagnostic reads for CNVs of interest. I have left it in the folder, and I believe that it should run fine if given the right arguments, but I haven't actually run it yet. 
#~/scripts/CNV_funestus/launchers/run_target_regions_analysis_vobs.sh ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/sample_manifest_known_species.txt ~/personal/v1.0_1231-VO-MULTI-WONDJI-VMF00043/data/sample_metadata_tabs.tsv v1.0_1231-VO-MULTI-WONDJI-VMF00043 

bsub -o temp.log -e temp.error -R"select[mem>1000] rusage[mem=1000]" -M1000 ~/scripts/CNV_funestus/scripts/join_CNV_output_files_vobs.sh v1.0_1231-VO-MULTI-WONDJI-VMF00043 

